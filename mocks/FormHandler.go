// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// FormHandler is an autogenerated mock type for the FormHandler type
type FormHandler struct {
	mock.Mock
}

// GET provides a mock function with given fields: _a0, _a1
func (_m *FormHandler) GET(_a0 string, _a1 *http.Request) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *http.Request) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *http.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// POST provides a mock function with given fields: _a0, _a1, _a2
func (_m *FormHandler) POST(_a0 string, _a1 string, _a2 *http.Request) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *http.Request) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *http.Request) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFormHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewFormHandler creates a new instance of FormHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormHandler(t mockConstructorTestingTNewFormHandler) *FormHandler {
	mock := &FormHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
