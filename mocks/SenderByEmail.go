// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	event "maunium.net/go/mautrix/event"
	id "maunium.net/go/mautrix/id"

	mock "github.com/stretchr/testify/mock"
)

// SenderByEmail is an autogenerated mock type for the SenderByEmail type
type SenderByEmail struct {
	mock.Mock
}

// SendByEmail provides a mock function with given fields: roomID, email, message, reactions
func (_m *SenderByEmail) SendByEmail(roomID id.RoomID, email string, message string, reactions ...string) bool {
	_va := make([]interface{}, len(reactions))
	for _i := range reactions {
		_va[_i] = reactions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roomID, email, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(id.RoomID, string, string, ...string) bool); ok {
		r0 = rf(roomID, email, message, reactions...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendNotice provides a mock function with given fields: roomID, message, relations
func (_m *SenderByEmail) SendNotice(roomID id.RoomID, message string, relations ...*event.RelatesTo) {
	_va := make([]interface{}, len(relations))
	for _i := range relations {
		_va[_i] = relations[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roomID, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewSenderByEmail creates a new instance of SenderByEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSenderByEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *SenderByEmail {
	mock := &SenderByEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
