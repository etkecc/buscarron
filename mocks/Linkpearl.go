// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	event "maunium.net/go/mautrix/event"
	id "maunium.net/go/mautrix/id"

	mautrix "maunium.net/go/mautrix"

	mock "github.com/stretchr/testify/mock"
)

// Linkpearl is an autogenerated mock type for the Linkpearl type
type Linkpearl struct {
	mock.Mock
}

// GetClient provides a mock function with given fields:
func (_m *Linkpearl) GetClient() *mautrix.Client {
	ret := _m.Called()

	var r0 *mautrix.Client
	if rf, ok := ret.Get(0).(func() *mautrix.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mautrix.Client)
		}
	}

	return r0
}

// Send provides a mock function with given fields: roomID, content
func (_m *Linkpearl) Send(roomID id.RoomID, content interface{}) (id.EventID, error) {
	ret := _m.Called(roomID, content)

	var r0 id.EventID
	var r1 error
	if rf, ok := ret.Get(0).(func(id.RoomID, interface{}) (id.EventID, error)); ok {
		return rf(roomID, content)
	}
	if rf, ok := ret.Get(0).(func(id.RoomID, interface{}) id.EventID); ok {
		r0 = rf(roomID, content)
	} else {
		r0 = ret.Get(0).(id.EventID)
	}

	if rf, ok := ret.Get(1).(func(id.RoomID, interface{}) error); ok {
		r1 = rf(roomID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFile provides a mock function with given fields: roomID, req, msgtype, relation
func (_m *Linkpearl) SendFile(roomID id.RoomID, req *mautrix.ReqUploadMedia, msgtype event.MessageType, relation *event.RelatesTo) error {
	ret := _m.Called(roomID, req, msgtype, relation)

	var r0 error
	if rf, ok := ret.Get(0).(func(id.RoomID, *mautrix.ReqUploadMedia, event.MessageType, *event.RelatesTo) error); ok {
		r0 = rf(roomID, req, msgtype, relation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: optionalStatusMsg
func (_m *Linkpearl) Start(optionalStatusMsg ...string) error {
	_va := make([]interface{}, len(optionalStatusMsg))
	for _i := range optionalStatusMsg {
		_va[_i] = optionalStatusMsg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(optionalStatusMsg...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Linkpearl) Stop() {
	_m.Called()
}

// NewLinkpearl creates a new instance of Linkpearl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkpearl(t interface {
	mock.TestingT
	Cleanup(func())
}) *Linkpearl {
	mock := &Linkpearl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
