// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	config "gitlab.com/etke.cc/buscarron/config"
	common "gitlab.com/etke.cc/buscarron/sub/ext/common"

	mautrix "maunium.net/go/mautrix"

	mock "github.com/stretchr/testify/mock"
)

// Extension is an autogenerated mock type for the Extension type
type Extension struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *Extension) Execute(_a0 common.Validator, _a1 *config.Form, _a2 map[string]string) (string, []*mautrix.ReqUploadMedia) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	var r1 []*mautrix.ReqUploadMedia
	if rf, ok := ret.Get(0).(func(common.Validator, *config.Form, map[string]string) (string, []*mautrix.ReqUploadMedia)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(common.Validator, *config.Form, map[string]string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(common.Validator, *config.Form, map[string]string) []*mautrix.ReqUploadMedia); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*mautrix.ReqUploadMedia)
		}
	}

	return r0, r1
}

// NewExtension creates a new instance of Extension. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtension(t interface {
	mock.TestingT
	Cleanup(func())
}) *Extension {
	mock := &Extension{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
